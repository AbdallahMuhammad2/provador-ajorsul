/* Standalone Function: fillHeader */

function fillHeader(d, o, c) {
    const h = {
        value: 0
    }
      , _ = new DataView(d.buffer);
    setUint32(_, 20000630, h),
    setUint32(_, 2, h),
    setString(_, "compression", h),
    setString(_, "compression", h),
    setUint32(_, 1, h),
    setUint8(_, c.compression, h),
    setString(_, "screenWindowCenter", h),
    setString(_, "v2f", h),
    setUint32(_, 8, h),
    setUint32(_, 0, h),
    setUint32(_, 0, h),
    setString(_, "screenWindowWidth", h),
    setString(_, "float", h),
    setUint32(_, 4, h),
    setFloat32(_, 1, h),
    setString(_, "pixelAspectRatio", h),
    setString(_, "float", h),
    setUint32(_, 4, h),
    setFloat32(_, 1, h),
    setString(_, "lineOrder", h),
    setString(_, "lineOrder", h),
    setUint32(_, 1, h),
    setUint8(_, 0, h),
    setString(_, "dataWindow", h),
    setString(_, "box2i", h),
    setUint32(_, 16, h),
    setUint32(_, 0, h),
    setUint32(_, 0, h),
    setUint32(_, c.width - 1, h),
    setUint32(_, c.height - 1, h),
    setString(_, "displayWindow", h),
    setString(_, "box2i", h),
    setUint32(_, 16, h),
    setUint32(_, 0, h),
    setUint32(_, 0, h),
    setUint32(_, c.width - 1, h),
    setUint32(_, c.height - 1, h),
    setString(_, "channels", h),
    setString(_, "chlist", h),
    setUint32(_, 18 * c.numOutputChannels + 1, h),
    setString(_, "A", h),
    setUint32(_, c.dataType, h),
    h.value += 4,
    setUint32(_, 1, h),
    setUint32(_, 1, h),
    setString(_, "B", h),
    setUint32(_, c.dataType, h),
    h.value += 4,
    setUint32(_, 1, h),
    setUint32(_, 1, h),
    setString(_, "G", h),
    setUint32(_, c.dataType, h),
    h.value += 4,
    setUint32(_, 1, h),
    setUint32(_, 1, h),
    setString(_, "R", h),
    setUint32(_, c.dataType, h),
    h.value += 4,
    setUint32(_, 1, h),
    setUint32(_, 1, h),
    setUint8(_, 0, h),
    setUint8(_, 0, h);
    let b = h.value + 8 * c.numBlocks;
    for (let _e = 0; _e < o.data.length; ++_e)
        setUint64(_, b, h),
        b += o.data[_e].size + 8
}

export default fillHeader;
