/* Extracted CSS Block 223 */
/* Size: 3131 chars */

);
                    if (Mt && Dr.samples > 0 && jn(Dr) === !1) {
                        const Lr = _r ? Sr : [Sr];
                        Fr.__webglMultisampledFramebuffer = Tt.createFramebuffer(),
                        Fr.__webglColorRenderbuffer = [],
                        lt.bindFramebuffer(Tt.FRAMEBUFFER, Fr.__webglMultisampledFramebuffer);
                        for (let Xr = 0; Xr < Lr.length; Xr++) {
                            const Kr = Lr[Xr];
                            Fr.__webglColorRenderbuffer[Xr] = Tt.createRenderbuffer(),
                            Tt.bindRenderbuffer(Tt.RENDERBUFFER, Fr.__webglColorRenderbuffer[Xr]);
                            const An = xt.convert(Kr.format, Kr.colorSpace)
                              , pn = xt.convert(Kr.type)
                              , _o = Pr(Kr.internalFormat, An, pn, Kr.colorSpace, Dr.isXRRenderTarget === !0)
                              , to = Zn(Dr);
                            Tt.renderbufferStorageMultisample(Tt.RENDERBUFFER, to, _o, Dr.width, Dr.height),
                            Tt.framebufferRenderbuffer(Tt.FRAMEBUFFER, Tt.COLOR_ATTACHMENT0 + Xr, Tt.RENDERBUFFER, Fr.__webglColorRenderbuffer[Xr])
                        }
                        Tt.bindRenderbuffer(Tt.RENDERBUFFER, null),
                        Dr.depthBuffer && (Fr.__webglDepthRenderbuffer = Tt.createRenderbuffer(),
                        Un(Fr.__webglDepthRenderbuffer, Dr, !0)),
                        lt.bindFramebuffer(Tt.FRAMEBUFFER, null)
                    }
                }
                if (kr) {
                    lt.bindTexture(Tt.TEXTURE_CUBE_MAP, Wr.__webglTexture),
                    Yr(Tt.TEXTURE_CUBE_MAP, Sr, Br);
                    for (let Lr = 0; Lr < 6; Lr++)
                        if (Mt && Sr.mipmaps && Sr.mipmaps.length > 0)
                            for (let Xr = 0; Xr < Sr.mipmaps.length; Xr++)
                                on(Fr.__webglFramebuffer[Lr][Xr], Dr, Sr, Tt.COLOR_ATTACHMENT0, Tt.TEXTURE_CUBE_MAP_POSITIVE_X + Lr, Xr);
                        else
                            on(Fr.__webglFramebuffer[Lr], Dr, Sr, Tt.COLOR_ATTACHMENT0, Tt.TEXTURE_CUBE_MAP_POSITIVE_X + Lr, 0);
                    br(Sr, Br) && yr(Tt.TEXTURE_CUBE_MAP),
                    lt.unbindTexture()
                } else if (_r) {
                    const Lr = Dr.texture;
                    for (let Xr = 0, Kr = Lr.length; Xr < Kr; Xr++) {
                        const An = Lr[Xr]
                          , pn = mt.get(An);
                        lt.bindTexture(Tt.TEXTURE_2D, pn.__webglTexture),
                        Yr(Tt.TEXTURE_2D, An, Br),
                        on(Fr.__webglFramebuffer, Dr, An, Tt.COLOR_ATTACHMENT0 + Xr, Tt.TEXTURE_2D, 0),
                        br(An, Br) && yr(Tt.TEXTURE_2D)
                    }
                    lt.unbindTexture()
                } else {
                    let Lr = Tt.TEXTURE_2D;
                    if ((Dr.isWebGL3DRenderTarget || Dr.isWebGLArrayRenderTarget) && (Mt ? Lr = Dr.isWebGL3DRenderTarget ? Tt.TEXTURE_3D : Tt.TEXTURE_2D_ARRAY : console.error(
