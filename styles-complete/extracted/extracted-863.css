/* Extracted CSS Block 863 */
/* Size: 1680 chars */

, this.onKeyUp),
        this.handleResize(),
        this.setOrientation()
    }
    setOrientation() {
        const d = this.object.quaternion;
        _lookDirection.set(0, 0, -1).applyQuaternion(d),
        _spherical.setFromVector3(_lookDirection),
        this.lat = 90 - three_module.cj9.radToDeg(_spherical.phi),
        this.lon = three_module.cj9.radToDeg(_spherical.theta)
    }
    handleResize() {
        this.domElement === document ? (this.viewHalfX = window.innerWidth / 2,
        this.viewHalfY = window.innerHeight / 2) : (this.viewHalfX = this.domElement.offsetWidth / 2,
        this.viewHalfY = this.domElement.offsetHeight / 2)
    }
    onPointerDown(d) {
        if (this.domElement !== document && this.domElement.focus(),
        this.activeLook)
            switch (d.button) {
            case 0:
                this.moveForward = !0;
                break;
            case 2:
                this.moveBackward = !0
            }
        this.mouseDragOn = !0
    }
    onPointerUp(d) {
        if (this.activeLook)
            switch (d.button) {
            case 0:
                this.moveForward = !1;
                break;
            case 2:
                this.moveBackward = !1
            }
        this.mouseDragOn = !1
    }
    onPointerMove(d) {
        this.domElement === document ? (this.pointerX = d.pageX - this.viewHalfX,
        this.pointerY = d.pageY - this.viewHalfY) : (this.pointerX = d.pageX - this.domElement.offsetLeft - this.viewHalfX,
        this.pointerY = d.pageY - this.domElement.offsetTop - this.viewHalfY)
    }
    onKeyDown(d) {
        if (this.enableKeys)
            switch (d.code) {
            case 
