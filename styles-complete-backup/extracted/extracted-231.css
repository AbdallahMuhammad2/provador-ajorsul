/* Extracted CSS Block 231 */
/* Size: 1845 chars */

in tt) && tt.readyState >= tt.HAVE_CURRENT_DATA && (this.needsUpdate = !0)
            }
        }
        class lS extends Ho {
            constructor(tt, lt) {
                super({
                    width: tt,
                    height: lt
                }),
                this.isFramebufferTexture = !0,
                this.magFilter = fn,
                this.minFilter = fn,
                this.generateMipmaps = !1,
                this.needsUpdate = !0
            }
        }
        class jv extends Ho {
            constructor(tt, lt, mt, ft, xt, Ct, Mt, Lt, Nt, jt, Wt, Qt) {
                super(null, Ct, Mt, Lt, Nt, jt, ft, xt, Wt, Qt),
                this.isCompressedTexture = !0,
                this.image = {
                    width: lt,
                    height: mt
                },
                this.mipmaps = tt,
                this.flipY = !1,
                this.generateMipmaps = !1
            }
        }
        class cS extends jv {
            constructor(tt, lt, mt, ft, xt, Ct) {
                super(tt, lt, mt, xt, Ct),
                this.isCompressedArrayTexture = !0,
                this.image.depth = ft,
                this.wrapR = wn
            }
        }
        class uS extends jv {
            constructor(tt, lt, mt) {
                super(void 0, tt[0].width, tt[0].height, lt, mt, Qr),
                this.isCompressedCubeTexture = !0,
                this.isCubeTexture = !0,
                this.image = tt
            }
        }
        class dS extends Ho {
            constructor(tt, lt, mt, ft, xt, Ct, Mt, Lt, Nt) {
                super(tt, lt, mt, ft, xt, Ct, Mt, Lt, Nt),
                this.isCanvasTexture = !0,
                this.needsUpdate = !0
            }
        }
        class Hl {
            constructor() {
                this.type = 
