/* Extracted CSS Block 398 */
/* Size: 1470 chars */

;
                var Et = bits(d, it, 31) + 257
                  , Pt = bits(d, it + 10, 15) + 4
                  , It = Et + bits(d, it + 5, 31) + 1;
                it += 14;
                for (var Dt = new u8(It), Gt = new u8(19), Bt = 0; Bt < Pt; ++Bt)
                    Gt[clim[Bt]] = bits(d, it + 3 * Bt, 7);
                it += 3 * Pt;
                var kt = max(Gt)
                  , Ut = (1 << kt) - 1
                  , Ht = hMap(Gt, kt, 1);
                for (Bt = 0; Bt < It; ) {
                    var Kt, Jt = Ht[bits(d, it, Ut)];
                    if (it += 15 & Jt,
                    (Kt = Jt >>> 4) < 16)
                        Dt[Bt++] = Kt;
                    else {
                        var or = 0
                          , ir = 0;
                        for (Kt == 16 ? (ir = 3 + bits(d, it, 3),
                        it += 2,
                        or = Dt[Bt - 1]) : Kt == 17 ? (ir = 3 + bits(d, it, 7),
                        it += 3) : Kt == 18 && (ir = 11 + bits(d, it, 127),
                        it += 7); ir--; )
                            Dt[Bt++] = or
                    }
                }
                var lr = Dt.subarray(0, Et)
                  , ar = Dt.subarray(Et);
                ht = max(lr),
                _t = max(ar),
                ut = hMap(lr, ht, 1),
                pt = hMap(ar, _t, 1)
            }
            if (it > vt) {
                if (b)
                    throw 
