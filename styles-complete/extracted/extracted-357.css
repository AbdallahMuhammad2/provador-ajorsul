/* Extracted CSS Block 357 */
/* Size: 3356 chars */


            },
            glslVersion: o ? three_module.Wdf : three_module.Wyr
        }),
        this.normalMapType = three_module.bI3,
        this.flatShading = !1,
        this._updaters = []
    }
    onBeforeRender(o, c, h, _, b) {
        var _e, nt, it, at, ut, pt, ht, _t, vt, bt, St, At, Et;
        super.onBeforeRender(o, c, h, _, b);
        let Pt = b.material;
        Array.isArray(Pt) && (Pt = Pt[0]),
        this.uniforms.map.value = (_e = Pt == null ? void 0 : Pt.map) !== null && _e !== void 0 ? _e : null,
        this.uniforms.map.value && o.materials.refreshTransformUniform(this.uniforms.map.value, this.uniforms.mapTransform),
        this.uniforms.alphaMap.value = (nt = Pt == null ? void 0 : Pt.alphaMap) !== null && nt !== void 0 ? nt : null,
        this.uniforms.alphaMap.value && o.materials.refreshTransformUniform(this.uniforms.alphaMap.value, this.uniforms.alphaMapTransform),
        this.alphaTest = !Pt || !Pt.alphaTest || Pt.alphaTest < 1e-7 ? .001 : Pt.alphaTest,
        this.uniforms.alphaTest.value = this.alphaTest,
        this.uniforms.displacementMap.value = (it = Pt == null ? void 0 : Pt.displacementMap) !== null && it !== void 0 ? it : null,
        this.uniforms.displacementMap.value && o.materials.refreshTransformUniform(this.uniforms.displacementMap.value, this.uniforms.displacementMapTransform),
        this.uniforms.displacementScale.value = (at = Pt == null ? void 0 : Pt.displacementScale) !== null && at !== void 0 ? at : 1,
        this.uniforms.displacementBias.value = (ut = Pt == null ? void 0 : Pt.displacementBias) !== null && ut !== void 0 ? ut : 0,
        this.uniforms.bumpMap.value = (pt = Pt == null ? void 0 : Pt.bumpMap) !== null && pt !== void 0 ? pt : null,
        this.uniforms.bumpMap.value && o.materials.refreshTransformUniform(this.uniforms.bumpMap.value, this.uniforms.bumpMapTransform),
        this.uniforms.bumpScale.value = (ht = Pt == null ? void 0 : Pt.bumpScale) !== null && ht !== void 0 ? ht : 1,
        this.uniforms.normalMap.value = (_t = Pt == null ? void 0 : Pt.normalMap) !== null && _t !== void 0 ? _t : null,
        this.uniforms.normalMap.value && o.materials.refreshTransformUniform(this.uniforms.normalMap.value, this.uniforms.normalMapTransform),
        this.uniforms.normalScale.value && this.uniforms.normalScale.value.copy((vt = Pt == null ? void 0 : Pt.normalScale) !== null && vt !== void 0 ? vt : new three_module.I9Y(1,1)),
        this.normalMapType = (bt = Pt == null ? void 0 : Pt.normalMapType) !== null && bt !== void 0 ? bt : three_module.bI3,
        this.flatShading = (St = Pt == null ? void 0 : Pt.flatShading) !== null && St !== void 0 && St,
        this.uniforms.flags.value.set(255, 255, 255, 255),
        this.uniforms.flags.value.z = (Pt != null && Pt.userData.matId ? Pt == null ? void 0 : Pt.userData.matId : 0) / 255,
        this._updaters.forEach(Dt => {
            Dt(b, this.uniforms.flags.value)
        }
        ),
        this.uniforms.flags.value.y /= 255,
        this.uniforms.flags.value.w /= 255,
        this.uniformsNeedUpdate = !0;
        let It = this.uniforms.alphaMap.value ? 1 : void 0;
        It !== this.defines.USE_ALPHAMAP && (It === void 0 ? (delete this.defines.USE_ALPHAMAP,
        delete this.defines.ALPHAMAP_UV) : (this.defines.USE_ALPHAMAP = It,
        this.defines.ALPHAMAP_UV = 
