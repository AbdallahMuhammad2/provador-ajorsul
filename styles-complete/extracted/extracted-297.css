/* Extracted CSS Block 297 */
/* Size: 2842 chars */

,
            defines: Object.assign({}, o.defines),
            uniforms: this.uniforms,
            vertexShader: o.vertexShader,
            fragmentShader: o.fragmentShader
        })),
        this.fsQuad = new FullScreenQuad(this.material),
        this.useExistingRenderTarget = !1
    }
    render(o, c, h) {
        this.uniforms[this.textureID] && h && (this.uniforms[this.textureID].value = h.texture),
        this.fsQuad.material = this.material,
        this.renderToScreen ? (o.setRenderTarget(null),
        this.fsQuad.render(o)) : (this.useExistingRenderTarget || o.setRenderTarget(c || null),
        this.clear && o.clear(o.autoClearColor, o.autoClearDepth, o.autoClearStencil),
        this.fsQuad.render(o))
    }
    dispose() {
        this.material.dispose(),
        this.fsQuad.dispose()
    }
}
class MaskPass extends Pass {
    constructor(o, c) {
        super(),
        this.scene = o,
        this.camera = c,
        this.clear = !0,
        this.needsSwap = !1,
        this.inverse = !1
    }
    render(o, c, h) {
        const _ = o.getContext()
          , b = o.state;
        let _e, nt;
        b.buffers.color.setMask(!1),
        b.buffers.depth.setMask(!1),
        b.buffers.color.setLocked(!0),
        b.buffers.depth.setLocked(!0),
        this.inverse ? (_e = 0,
        nt = 1) : (_e = 1,
        nt = 0),
        b.buffers.stencil.setTest(!0),
        b.buffers.stencil.setOp(_.REPLACE, _.REPLACE, _.REPLACE),
        b.buffers.stencil.setFunc(_.ALWAYS, _e, 4294967295),
        b.buffers.stencil.setClear(nt),
        b.buffers.stencil.setLocked(!0),
        o.setRenderTarget(h),
        this.clear && o.clear(),
        o.render(this.scene, this.camera),
        o.setRenderTarget(c),
        this.clear && o.clear(),
        o.render(this.scene, this.camera),
        b.buffers.color.setLocked(!1),
        b.buffers.depth.setLocked(!1),
        b.buffers.color.setMask(!0),
        b.buffers.depth.setMask(!0),
        b.buffers.stencil.setLocked(!1),
        b.buffers.stencil.setFunc(_.EQUAL, 1, 4294967295),
        b.buffers.stencil.setOp(_.KEEP, _.KEEP, _.KEEP),
        b.buffers.stencil.setLocked(!0)
    }
}
class ClearMaskPass extends Pass {
    constructor() {
        super(),
        this.needsSwap = !1
    }
    render(o) {
        o.state.buffers.stencil.setLocked(!1),
        o.state.buffers.stencil.setTest(!1)
    }
}
class EffectComposer {
    constructor(o, c) {
        if (this.renderer = o,
        this._pixelRatio = o.getPixelRatio(),
        c === void 0) {
            const h = o.getSize(new three_module.I9Y);
            this._width = h.width,
            this._height = h.height,
            (c = new three_module.nWS(this._width * this._pixelRatio,this._height * this._pixelRatio,{
                type: three_module.ix0
            })).texture.name = 
